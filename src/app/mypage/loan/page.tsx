'use client';

import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useAuth } from '@/hooks/useAuth';
import { cn } from '@/lib/utils';
import { Check, Clock, History, ArrowLeft, Building2, Store } from 'lucide-react';
import { toast } from 'react-hot-toast';
import { db } from '@/lib/firebase';
import { ref, onValue, update } from 'firebase/database';
import { useRouter } from 'next/navigation';
import Link from 'next/link';

type LoanType = 'all' | 'guild' | 'merchant';

export default function LoanStatusPage() {
  const { user, discordName } = useAuth();
  const router = useRouter();
  const [activeTab, setActiveTab] = useState<LoanType>('all');
  const [loans, setLoans] = useState<any[]>([]);
  const [merchants, setMerchants] = useState<Record<string, any>>({});

  useEffect(() => {
    if (!user) {
      router.push('/');
      return;
    }

    const loansRef = ref(db, 'guildLoans');
    const merchantsRef = ref(db, 'tradeMerchants');

    const unsubscribeLoans = onValue(loansRef, (snapshot) => {
      const data = snapshot.val();
      const loansList = data ? Object.entries(data)
        .map(([id, loan]: [string, any]) => ({
          id,
          ...loan
        }))
        .filter(loan => 
          loan.borrowerId === user.uid
        )
        .sort((a, b) => b.createdAt - a.createdAt) : [];
      setLoans(loansList);
    });

    const unsubscribeMerchants = onValue(merchantsRef, (snapshot) => {
      const data = snapshot.val();
      setMerchants(data || {});
    });

    return () => {
      unsubscribeLoans();
      unsubscribeMerchants();
    };
  }, [user, router]);

  const handleReturn = async (loanId: string) => {
    if (!user) return;

    try {
      const loanRef = ref(db, `guildLoans/${loanId}`);
      await update(loanRef, { 
        status: 'returned',
        returnedAt: Date.now()
      });
      toast.success('‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } catch (error) {
      toast.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô');
    }
  };

  const filteredLoans = loans.filter(loan => {
    if (activeTab === 'all') return true;
    return loan.source?.type === activeTab;
  });

  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-b from-pink-50/50 to-purple-50/50">
        <div className="relative">
          {/* Outer ring with gradient */}
          <div className="w-24 h-24 rounded-full bg-gradient-to-r from-pink-100 to-purple-100 shadow-lg animate-pulse"></div>
          
          {/* Spinning ring */}
          <div className="absolute inset-0">
            <div className="w-24 h-24 rounded-full border-4 border-pink-300 border-t-transparent animate-spin"></div>
          </div>
          
          {/* Inner ring with gradient */}
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="w-16 h-16 rounded-full bg-gradient-to-r from-pink-200 to-purple-200 shadow-inner animate-pulse"></div>
          </div>
          
          {/* Center dot */}
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="w-8 h-8 rounded-full bg-white shadow-lg animate-pulse"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen">
      <div className="container mx-auto px-4 py-8">
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8 bg-white/90 backdrop-blur-sm rounded-2xl p-6 shadow-xl border border-pink-200"
        >
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-800">üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</h1>
              <p className="text-gray-600 mt-2">@{discordName}</p>
            </div>
          </div>
        </motion.div>

        <div className="flex space-x-4 mb-6 overflow-x-auto pb-2">
          <button
            onClick={() => setActiveTab('all')}
            className={cn(
              "flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors whitespace-nowrap",
              activeTab === 'all'
                ? "bg-pink-100 text-pink-600"
                : "bg-white text-gray-600 hover:bg-pink-50"
            )}
          >
            <History className="w-5 h-5" />
            <span>‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</span>
          </button>
          <button
            onClick={() => setActiveTab('guild')}
            className={cn(
              "flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors whitespace-nowrap",
              activeTab === 'guild'
                ? "bg-blue-100 text-blue-600"
                : "bg-white text-gray-600 hover:bg-blue-50"
            )}
          >
            <Building2 className="w-5 h-5" />
            <span>‡∏à‡∏≤‡∏Å‡∏Å‡∏¥‡∏•‡∏î‡πå</span>
          </button>
          <button
            onClick={() => setActiveTab('merchant')}
            className={cn(
              "flex items-center space-x-2 px-4 py-2 rounded-lg transition-colors whitespace-nowrap",
              activeTab === 'merchant'
                ? "bg-purple-100 text-purple-600"
                : "bg-white text-gray-600 hover:bg-purple-50"
            )}
          >
            <Store className="w-5 h-5" />
            <span>‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏û‡πà‡∏≠‡∏Ñ‡πâ‡∏≤</span>
          </button>
        </div>

        <div className="space-y-4">
          {filteredLoans.length === 0 ? (
            <div className="text-center py-12 bg-white/90 backdrop-blur-sm rounded-2xl shadow-xl border border-pink-200">
              <p className="text-gray-500">‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏á‡∏¥‡∏ô</p>
            </div>
          ) : (
            filteredLoans.map((loan, index) => (
              <motion.div
                key={loan.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.1 }}
                className="bg-white/90 backdrop-blur-sm rounded-2xl p-6 shadow-xl border border-pink-200"
              >
                <div className="flex justify-between items-start">
                  <div>
                    <div className="flex items-center space-x-2">
                      {loan.source?.type === 'guild' ? (
                        <Building2 className="w-5 h-5 text-blue-500" />
                      ) : (
                        <Store className="w-5 h-5 text-purple-500" />
                      )}
                      <h3 className="text-lg font-semibold text-gray-800">
                        {loan.source?.type === 'guild' 
                          ? `‡∏Å‡∏¥‡∏•‡∏î‡πå ${loan.source?.guild}`
                          : `‡∏£‡πâ‡∏≤‡∏ô @${merchants[loan.source?.merchantId]?.discordName || '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}`}
                      </h3>
                    </div>
                    <p className="text-xl font-bold text-gray-800 mt-2">{loan.amount}G</p>
                    <div className="space-y-1 mt-2">
                      <p className="text-sm text-gray-500">
                        ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠: {new Date(loan.createdAt).toLocaleString()}
                      </p>
                      {loan.dueDate && (
                        <p className="text-sm text-gray-500">
                          ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô: {new Date(loan.dueDate).toLocaleDateString()}
                        </p>
                      )}
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    {loan.status === 'active' ? (
                      <button
                        onClick={() => handleReturn(loan.id)}
                        className="flex items-center space-x-1 px-3 py-1 rounded-lg bg-green-50 hover:bg-green-100 text-green-600 transition-colors"
                      >
                        <Check className="w-4 h-4" />
                        <span>‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß</span>
                      </button>
                    ) : loan.status === 'returned' ? (
                      <span className="px-3 py-1 rounded-full text-sm bg-orange-100 text-orange-800">
                        ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
                      </span>
                    ) : loan.status === 'completed' ? (
                      <span className="px-3 py-1 rounded-full text-sm bg-green-100 text-green-800">
                        ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
                      </span>
                    ) : null}
                    <span className={cn(
                      "px-3 py-1 rounded-full text-sm",
                      loan.status === 'waitingApproval' && "bg-yellow-100 text-yellow-800",
                      loan.status === 'active' && "bg-blue-100 text-blue-800",
                      loan.status === 'returned' && "bg-orange-100 text-orange-800",
                      loan.status === 'completed' && "bg-green-100 text-green-800"
                    )}>
                      {loan.status === 'waitingApproval' && '‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥'}
                      {loan.status === 'active' && '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°'}
                      {loan.status === 'returned' && '‡πÅ‡∏à‡πâ‡∏á‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß'}
                      {loan.status === 'completed' && '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô'}
                    </span>
                  </div>
                </div>
              </motion.div>
            ))
          )}
        </div>
      </div>
    </div>
  );
} 